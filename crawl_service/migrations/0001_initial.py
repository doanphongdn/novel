# Generated by Django 3.1.4 on 2020-12-26 04:14

import crawl_service.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CrawlCampaignSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('homepage', models.CharField(max_length=250)),
            ],
            options={
                'db_table': 'crawl_campaign_sources',
            },
        ),
        migrations.CreateModel(
            name='CrawlCampaign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('campaign_type', models.CharField(choices=[('NOVEL', 'NOVEL'), ('NOVEL_INFO', 'NOVEL_INFO'), ('NOVEL_CHAPTER', 'NOVEL_CHAPTER')], max_length=50)),
                ('name', models.CharField(max_length=250)),
                ('target_url', models.CharField(max_length=250)),
                ('target_direct', models.BooleanField(default=True, help_text='If option is TRUE, this campaign will call directly by target_url otherwise call via API and get list of urls from response.')),
                ('paging_param', models.CharField(blank=True, default='', help_text='Blank if no pagination.', max_length=50, null=True)),
                ('paging_delay', models.IntegerField(default=0, help_text='If the target url has pagination, this option will allow to delay any second after each request')),
                ('repeat_time', models.IntegerField(default=5, help_text='Minutes to repeat this campaign, set 0 if dont want to repeat')),
                ('last_run', models.DateTimeField(blank=True, default=None, null=True)),
                ('status', models.CharField(choices=[('running', 'RUNNING'), ('stopped', 'STOPPED')], max_length=10)),
                ('active', models.BooleanField(default=True)),
                ('campaign_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crawl_service.crawlcampaignsource')),
            ],
            options={
                'db_table': 'crawl_campaigns',
            },
        ),
        migrations.CreateModel(
            name='CrawlItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, validators=[crawl_service.models.code_validate])),
                ('parent_code', models.CharField(blank=True, max_length=50, null=True, validators=[crawl_service.models.code_validate])),
                ('xpath', models.CharField(max_length=250)),
                ('ignore_duplication', models.BooleanField(default=False)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crawl_service.crawlcampaign')),
            ],
            options={
                'db_table': 'crawl_campaign_items',
                'unique_together': {('campaign', 'code', 'parent_code')},
            },
        ),
    ]
